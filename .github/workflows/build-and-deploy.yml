on:
  push:
    tags: "v**"
jobs:
  release:
    name: Release - ${{ matrix.platform.os-name }}
    strategy:
      matrix:
        platform:

          - os-name: Linux-x86_64
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - os-name: Linux-aarch64
            runs-on: ubuntu-latest
            target: aarch64-unknown-linux-musl

          - os-name: Windows-x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc

          - os-name: macOS-x86_64
            runs-on: macOS-latest
            target: x86_64-apple-darwin

    runs-on: ${{ matrix.platform.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
      - name: Publish artifacts and release
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: mcp-wos-gibtsn-heid
          target: ${{ matrix.platform.target }}
          changes-file: "CHANGELOG.md"

  mcpb:
    name: Build MCPB Package
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install MCPB CLI
        run: npm install -g @anthropic-ai/dxt
        # run: npm install -g @anthropic-ai/mcpb # <- update to this name when https://github.com/anthropics/mcpb/issues/95#92 is resolved

      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./mcpb-build

      - name: Prepare MCPB directory
        run: |
          mkdir -p mcpb-package/bin
          
          echo "Examining downloaded artifacts..."
          find ./mcpb-build -type f -name "mcp-wos-gibtsn-heid*" -exec ls -la {} \;
          
          # Copy binaries with reliable platform detection based on target name
          # Windows binary (x86_64-pc-windows-msvc target)
          find ./mcpb-build -path "*x86_64-pc-windows-msvc*" -name "mcp-wos-gibtsn-heid*" -exec cp {} mcpb-package/bin/mcp-wos-gibtsn-heid.exe \;
          
          # macOS binary (x86_64-apple-darwin target)
          find ./mcpb-build -path "*x86_64-apple-darwin*" -name "mcp-wos-gibtsn-heid*" -exec cp {} mcpb-package/bin/mcp-wos-gibtsn-heid-darwin \;
          
          # Linux x86_64 binary
          find ./mcpb-build -path "*x86_64-unknown-linux-musl*" -name "mcp-wos-gibtsn-heid*" -exec cp {} mcpb-package/bin/mcp-wos-gibtsn-heid-linux \;
          
          # Linux aarch64 binary (ARM64)
          find ./mcpb-build -path "*aarch64-unknown-linux-musl*" -name "mcp-wos-gibtsn-heid*" -exec cp {} mcpb-package/bin/mcp-wos-gibtsn-heid-linux-arm64 \;
          
          # Make sure all binaries are executable
          chmod +x mcpb-package/bin/*
          
          # List what we have for verification
          echo "MCPB package binaries:"
          ls -la mcpb-package/bin/

      - name: Prepare MCPB manifest
        run: |
          cd mcpb-package
          
          # Copy the template manifest file
          cp ../manifest.json manifest.json
          
          # Replace version placeholder with actual version (remove 'v' prefix if present)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" manifest.json

      - name: Validate MCPB manifest
        run: |
          cd mcpb-package
          mcpb validate manifest.json

      - name: Build MCPB package
        run: |
          cd mcpb-package
          mcpb pack . "../mcp-wos-gibtsn-heid.mcpb"

      - name: Get Release Upload URL
        id: get_release
        run: |
          TAG="${{ github.ref_name }}"
          UPLOAD_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG" | \
            jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

      - name: Upload MCPB to release
        run: |
          TAG="${{ github.ref_name }}"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            "${{ steps.get_release.outputs.upload_url }}?name=mcp-wos-gibtsn-heid-${TAG}.mcpb&label=MCPB+Package" \
            --data-binary @mcp-wos-gibtsn-heid.mcpb
