on:
  push:
    tags: "v**"
jobs:
  release:
    name: Release - ${{ matrix.platform.os-name }}
    strategy:
      matrix:
        platform:

          - os-name: Linux-x86_64
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - os-name: Linux-aarch64
            runs-on: ubuntu-latest
            target: aarch64-unknown-linux-musl

          - os-name: Windows-x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc

          - os-name: macOS-x86_64
            runs-on: macOS-latest
            target: x86_64-apple-darwin

    runs-on: ${{ matrix.platform.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
      - name: Publish artifacts and release
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: mcp-wos-gibtsn-heid
          target: ${{ matrix.platform.target }}
          changes-file: "CHANGELOG.md"

  mcpb:
    name: Build MCPB Package
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install MCPB CLI
        run: npm install -g @anthropic-ai/mcpb

      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./mcpb-build

      - name: Prepare MCPB directory
        run: |
          mkdir -p mcpb-package/bin
          mkdir -p extracted
          
          echo "Examining downloaded artifacts..."
          find ./mcpb-build -type f -name "*.tar.gz" -o -name "*.zip" | grep -v "\.sha256$" | sort
          
          # Extract Windows binary (.zip)
          echo "Extracting Windows binary..."
          find ./mcpb-build -path "*Windows*" -name "*.zip" -not -name "*.sha256" -exec unzip -j {} -d extracted/windows \;
          find extracted/windows -type f -name "mcp-wos-gibtsn-heid*" -exec cp {} mcpb-package/bin/mcp-wos-gibtsn-heid.exe \;
          echo "Windows binary extracted:"
          ls -la extracted/windows || echo "No Windows binary found!"
          
          # Extract macOS binary (.tar.gz)
          echo "Extracting macOS binary..."
          find ./mcpb-build -path "*macOS*" -name "*.tar.gz" -not -name "*.sha256" -exec tar -xzf {} -C extracted/macos --strip-components=1 \;
          mkdir -p extracted/macos
          find ./mcpb-build -path "*macOS*" -name "*.tar.gz" -not -name "*.sha256" -exec tar -xzf {} -C extracted/macos \;
          find extracted/macos -type f -name "mcp-wos-gibtsn-heid*" -exec cp {} mcpb-package/bin/mcp-wos-gibtsn-heid-darwin \;
          echo "macOS binary extracted:"
          ls -la extracted/macos || echo "No macOS binary found!"
          
          # Extract Linux x86_64 binary (.tar.gz)
          echo "Extracting Linux x86_64 binary..."
          mkdir -p extracted/linux-x86_64
          find ./mcpb-build -path "*Linux*x86_64*" -name "*.tar.gz" -not -name "*.sha256" -exec tar -xzf {} -C extracted/linux-x86_64 \;
          find extracted/linux-x86_64 -type f -name "mcp-wos-gibtsn-heid*" -exec cp {} mcpb-package/bin/mcp-wos-gibtsn-heid-linux \;
          echo "Linux x86_64 binary extracted:"
          ls -la extracted/linux-x86_64 || echo "No Linux x86_64 binary found!"
          
          # Extract Linux ARM64 binary (.tar.gz)
          echo "Extracting Linux ARM64 binary..."
          mkdir -p extracted/linux-arm64
          find ./mcpb-build -path "*Linux*arm64*" -name "*.tar.gz" -not -name "*.sha256" -exec tar -xzf {} -C extracted/linux-arm64 \;
          find extracted/linux-arm64 -type f -name "mcp-wos-gibtsn-heid*" -exec cp {} mcpb-package/bin/mcp-wos-gibtsn-heid-linux-arm64 \;
          echo "Linux ARM64 binary extracted:"
          ls -la extracted/linux-arm64 || echo "No Linux ARM64 binary found!"
          
          # Make sure all binaries are executable
          chmod +x mcpb-package/bin/* 2>/dev/null || echo "No binaries found to make executable"
          
          # List what we have for verification
          echo "MCPB package binaries:"
          ls -la mcpb-package/bin/ || echo "No binaries in package directory!"

      - name: Prepare MCPB manifest
        run: |
          cd mcpb-package
          
          # Copy the template manifest file
          cp ../manifest.json manifest.json
          
          # Replace version placeholder with actual version (remove 'v' prefix if present)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" manifest.json

      - name: Validate MCPB manifest
        run: |
          cd mcpb-package
          mcpb validate manifest.json || dxt validate manifest.json

      - name: Build MCPB package
        run: |
          cd mcpb-package
          mcpb pack . "../mcp-wos-gibtsn-heid.mcpb" || dxt pack . "../mcp-wos-gibtsn-heid.mcpb"

      - name: Get Release Upload URL
        id: get_release
        run: |
          TAG="${{ github.ref_name }}"
          UPLOAD_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG" | \
            jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

      - name: Upload MCPB to release
        run: |
          TAG="${{ github.ref_name }}"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            "${{ steps.get_release.outputs.upload_url }}?name=mcp-wos-gibtsn-heid-${TAG}.mcpb&label=MCPB+Package" \
            --data-binary @mcp-wos-gibtsn-heid.mcpb
